class Solution {
    int[] NORTH = {0, 1};
    int[] WEST = {-1, 0};
    int[] SOUTH = {0, -1};
    int[] EAST = {1, 0};

    public int robotSim(int[] commands, int[][] obstacles) {
        int max = 0;
        int[] pos = {0, 0};
        int[] dir = NORTH;
        Map<Integer, Set<Integer>> hash = buildObstacleMap(obstacles);
        for (int c : commands) {
            if (c >= 1 && c <= 9){
                move(pos, dir, c, hash);
                max = Math.max(max, getDistance(pos));
            } else {
                dir = setDirection(dir, c);
            }
        }
        return max;
    }

    private Map buildObstacleMap(int[][] obstacles) {
        Map<Integer, Set<Integer>> hash = new HashMap();
        for (int i = 0; i < obstacles.length; i++) {
            hash.putIfAbsent(obstacles[i][0], new HashSet());
            hash.get(obstacles[i][0]).add(obstacles[i][1]);
        }
        return hash;
    }

    private void move(int[] pos, int[] direct, int step, Map<Integer, Set<Integer>> obs) {
        for (int i = 0; i < step; i++) {
            int[] newPos = {pos[0] + direct[0], pos[1] + direct[1]};
            if (!isObstacle(newPos, obs)) {
                pos[0] = newPos[0];
                pos[1] = newPos[1];
            } else {
                break;
            }
        }
    }

    private boolean isObstacle(int[] pos, Map<Integer, Set<Integer>> obs) {
        return obs.containsKey(pos[0]) && obs.get(pos[0]).contains(pos[1]);
    }

    private int getDistance(int[] pos) {
        return pos[0] * pos[0] + pos[1] * pos[1];
    }

    private int[] setDirection(int[] d, int c) {
        if (Arrays.equals(d, NORTH)) {
            return c == -2 ? WEST : EAST;
        } else if (Arrays.equals(d, WEST)) {
            return c == -2 ? SOUTH : NORTH;
        } else if (Arrays.equals(d, SOUTH)) {
            return c == -2 ? EAST : WEST;
        } else {
            return c == -2 ? NORTH : SOUTH;
        }
    }
}
