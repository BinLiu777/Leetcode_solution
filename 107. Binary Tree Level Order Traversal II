/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new LinkedList();
        Queue<TreeNode> queue = new LinkedList();
        if(root != null){
            queue.add(root);
            while(!queue.isEmpty()){
                List<Integer> list = new LinkedList();
                //System.out.println(queue.size());
                int limit = queue.size();
                for(int i = 0; i < limit; i++){
                    TreeNode node = queue.poll();
                    //System.out.println(queue.size());
                    list.add(node.val);
                    if(node.left != null){
                        queue.add(node.left);
                    }
                    if(node.right != null){
                        queue.add(node.right);
                    }
                    //System.out.println(queue.size());
                }
                res.add(list);
            }
        }
        for(int i = 0, j = res.size() - 1; i < j; i++, j--){
            List<Integer> temp = res.get(i);
            res.set(i, res.get(j));
            res.set(j, temp);
        }
        return res;
    }
}
/*
class Solution {
        public List<List<Integer>> levelOrderBottom(TreeNode root) {
            List<List<Integer>> lists = new ArrayList<>();
            func(lists, 0, root);
            for (int i = 0, j = lists.size() - 1; i < j; i++, j--) {
                List<Integer> temp = lists.get(i);
                lists.set(i, lists.get(j));
                lists.set(j, temp);
            }
            return lists;
        }

        private void func(List<List<Integer>> lists, int level, TreeNode root) {
            if (root == null) {
                return;
            }
            if (lists.size() == level) {
                List<Integer> list = new ArrayList<>();
                list.add(root.val);
                lists.add(list);
            } else {
                lists.get(level).add(root.val);
            }
            func(lists, level + 1, root.left);
            func(lists, level + 1, root.right);
        }
  }
  */
