/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<Integer, Integer> map = new HashMap();
    int max = 0;
    public int[] findMode(TreeNode root) {
        if(root == null){
            return new int[0];
        }
        List<Integer> list = new LinkedList();
        findNumber(root);
        for(int i : map.keySet()){
            if(map.get(i) == max){
                list.add(i);
            }
        }
        int[] res = new int[list.size()];
        for(int i = 0; i < list.size(); i++){
            res[i] = list.get(i);
        }
        return res;
    }

    private void findNumber(TreeNode root){
//         // if(root == null){
//         //     return;
//         // }

//         if(!map.containsKey(root.val)){
//             map.put(root.val, 1);
//             // if(max == 0){
//             //     max = 1;
//             // }
//         } else {
//             map.put(root.val, map.get(root.val) + 1);
//             // if(map.get(root.val) > max){
//             //     max = map.get(root.val);
//             // }
//         }
//         max = Math.max(max, map.get(root.val));
//         if(root.left != null)
//             findNumber(root.left);
//         if(root.right != null)
//             findNumber(root.right);
        if(root.left!=null) findNumber(root.left);
        map.put(root.val, map.getOrDefault(root.val, 0)+1);
        max = Math.max(max, map.get(root.val));
        if(root.right!=null) findNumber(root.right);

    }
}
