class MyStack {

    Queue<Integer> queue;

    public MyStack() {
        queue = new LinkedList<>();
    }

    /**
     * Push element x onto stack.
     */
    public void push(int x) {
        if (queue.isEmpty()) {
            queue.add(x);
        } else {
            Queue<Integer> temp = new LinkedList<>();;
            temp.add(x);
            while(!queue.isEmpty()){
                temp.add(queue.poll());
            }
            queue = temp;
        }
    }

    /**
     * Removes the element on top of the stack and returns that element.
     */
    public int pop() {
        if(!queue.isEmpty()){
            int i = queue.poll();
            return i;
        }
        return 0;
    }

    /**
     * Get the top element.
     */
    public int top() {
        if(!queue.isEmpty()){
            return queue.peek();
        }
        return 0;
    }

    /**
     * Returns whether the stack is empty.
     */
    public boolean empty() {
        return queue.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
