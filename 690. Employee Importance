/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        Map<Integer,Employee> map = new HashMap<Integer,Employee>();
        for(Employee employee : employees){
            map.put(employee.id, employee);
        }
        if(map.containsKey(id)){
            return getSubordinates(map, id);
        }
        return 0;
    }
    private int getSubordinates(Map<Integer,Employee> map, int id){
        if(map.get(id).subordinates.size() == 0){
            return map.get(id).importance;
        }
        int sum = 0;
        for(int i : map.get(id).subordinates){
            sum += getSubordinates(map, i);
        }
        return sum+map.get(id).importance;
    }
}
